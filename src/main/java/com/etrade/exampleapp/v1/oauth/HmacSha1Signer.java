package com.auto-etrade.v1.oauth;

import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.auto-etrade.v1.oauth.model.OAuthToken;
import com.auto-etrade.v1.oauth.model.SecurityContext;

/*
 * This class used for signing the signature base generated by using several HTTP request elements and oauth parameters.
 * The signature base string is then encrypted with a salt called the signing key which is always
 * a joining of the OAuth Consumer Secret and Token Secret.
 * 
 */
public class HmacSha1Signer implements OAuthSigner {

	Logger log = Logger.getLogger(HmacSha1Signer.class);

	private static String HMAC_SHA1_ALGORITHM = "HmacSHA1";

	@Override 
	public String getSignatureMethod() {
		return "HMAC-SHA1";
	}
	
	@Override
	public String computeSignature(String signatureBaseString, SecurityContext context) throws GeneralSecurityException {

		String key = "";
		
		OAuthToken token = context.getToken();
		
		if( token != null){
			 key = StringUtils.isEmpty(token.getOauth_token_secret()) ? context.getResouces().getSharedSecret() +"&" : 
				 context.getResouces().getSharedSecret()+"&" + OAuth1Template.encode(token.getOauth_token_secret());
		}else{
			key =  context.getResouces().getSharedSecret() +"&";
		}
		/*log.debug(" signing key "+ key);

		log.debug(" computeSignature "+ signatureBaseString);

		log.debug(" the generated url "+ signatureBaseString);*/
		
		log.debug(" HmacSha1Signer - signatureBaseString  "+ signatureBaseString);
		
		SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(),HMAC_SHA1_ALGORITHM);
		// get an hmac_sha1 Mac instance and initialize with the signing key
		Mac mac = null;
		try {
			mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
		} catch (NoSuchAlgorithmException e) {
			throw new IllegalArgumentException(e);
		}

		try {
			mac.init(signingKey);
		} catch (InvalidKeyException e) {
			throw new IllegalArgumentException(e);
		}

		// compute the hmac on the signatureBaseString
		byte[] raw = mac.doFinal(signatureBaseString.getBytes());
		// base64-encode the hmac
		String result = new String(Base64.encodeBase64(raw));
		log.debug(" computeSignature from HMAC "+result);
		return result;
	}
}
